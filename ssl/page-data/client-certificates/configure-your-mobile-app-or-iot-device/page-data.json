{"componentChunkName":"component-mdx.js","path":"/client-certificates/configure-your-mobile-app-or-iot-device","result":{"data":{"mdx":{"id":"5723ab69-1dc0-50b8-b36d-ada4a59cc8da","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 3,\n  \"pcx-content-type\": \"tutorial\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Aside = makeShortcode(\"Aside\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"configure-your-mobile-app-or-iot-device\"\n  }, \"Configure your mobile app or IoT device\"), mdx(\"p\", null, \"To configure your Internet-of-things (IoT) device and mobile application to use client certificates with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-rules/api-shield\"\n  }, \"API Shield\\u2122\"), \", follow this workflow:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#create-cloudflare-issued-certificates\"\n  }, \"Create Cloudflare-issued certificates\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#embed-the-client-certificate-in-your-mobile-app\"\n  }, \"Embed the certificate in your mobile app\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#embed-the-client-certificate-on-your-iot-device\"\n  }, \"Embed the certificate on your IoT device\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#enable-mtls\"\n  }, \"Enable mutual Transport Layer Security (mTLS)\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#configure-api-shield-to-require-client-certificates\"\n  }, \"Configure API Shield\"), \" to require the use of Cloudflare-issued certificates.\")), mdx(\"p\", null, \"This walkthrough uses the example of a device that captures temperature readings and transmits them by sending a POST request to a Cloudflare-protected API. A mobile application built in Swift for iOS retrieves those readings and displays them.\"), mdx(\"p\", null, \"To keep this example simple, the API is implemented as a Cloudflare Worker (borrowing code from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/workers/tutorials/build-a-jamstack-app\"\n  }, \"To-Do List tutorial on building a jamstack app\"), \").\"), mdx(\"p\", null, \"Temperatures are stored in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/workers/learning/how-kv-works\"\n  }, \"Workers KV\"), \" using the source IP address as a key, but you can easily use a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/access/service-auth/mtls-headers/\"\n  }, \"value from the client certificate\"), \", such as the fingerprint.\"), mdx(\"p\", null, \"The example API code below saves a temperature and timestamp into KV when a POST is made, and returns the most recent 5 temperatures when a GET request is made.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const defaultData = { temperatures: [] }\\n\\nconst getCache = key => TEMPERATURES.get(key)\\nconst setCache = (key, data) => TEMPERATURES.put(key, data)\\n\\nasync function addTemperature(request) {\\n\\n    // Pull previously recorded temperatures for this client.\\n    const ip = request.headers.get('CF-Connecting-IP')\\n    const cacheKey = `data-${ip}`\\n    let data\\n    const cache = await getCache(cacheKey)\\n    if (!cache) {\\n        await setCache(cacheKey, JSON.stringify(defaultData))\\n        data = defaultData\\n    } else {\\n        data = JSON.parse(cache)\\n    }\\n\\n    // Append the recorded temperatures with the submitted reading (assuming it has both temperature and a timestamp).\\n    try {\\n        const body = await request.text()\\n        const val = JSON.parse(body)\\n\\n        if (val.temperature && val.time) {\\n            data.temperatures.push(val)\\n            await setCache(cacheKey, JSON.stringify(data))\\n            return new Response(\\\"\\\", { status: 201 })\\n        } else {\\n            return new Response(\\\"Unable to parse temperature and/or timestamp from JSON POST body\\\", { status: 400 })\\n        }\\n    } catch (err) {\\n        return new Response(err, { status: 500 })\\n    }\\n}\\n\\nfunction compareTimestamps(a,b) {\\n    return -1 * (Date.parse(a.time) - Date.parse(b.time))\\n}\\n\\n// Return the 5 most recent temperature measurements.\\nasync function getTemperatures(request) {\\n    const ip = request.headers.get('CF-Connecting-IP')\\n    const cacheKey = `data-${ip}`\\n\\n    const cache = await getCache(cacheKey)\\n    if (!cache) {\\n        return new Response(JSON.stringify(defaultData), { status: 200, headers: { 'content-type': 'application/json' } })\\n    } else {\\n        data = JSON.parse(cache)\\n        const retval = JSON.stringify(data.temperatures.sort(compareTimestamps).splice(0,5))\\n        return new Response(retval, { status: 200, headers: { 'content-type': 'application/json' } })\\n    }\\n}\\n\\nasync function handleRequest(request) {\\n\\n    if (request.method === 'POST') {\\n        return addTemperature(request)\\n    } else {\\n        return getTemperatures(request)\\n    }\\n\\n}\\n\\naddEventListener('fetch', event => {\\n  event.respondWith(handleRequest(event.request))\\n})\\n\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"validate-api\"\n  }, \"Validate API\"), mdx(\"h3\", {\n    \"id\": \"post-sample-data-to-api\"\n  }, \"POST sample data to API\"), mdx(\"p\", null, \"To validate the API before adding mTLS authentication, POST a random temperature reading:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ TEMPERATURE=$(echo $((361 + RANDOM %11)) | awk '{printf(\\\"%.2f\\\",$1/10.0)}')\\n$ TIMESTAMP=$(date -u +\\\"%Y-%m-%dT%H:%M:%SZ\\\")\\n\\n$ echo -e \\\"$TEMPERATURE\\\\n$TIMESTAMP\\\"\\n36.70\\n2020-09-28T02:54:56Z\\n\\n$ curl -v -H \\\"Content-Type: application/json\\\" -d '{\\\"temperature\\\":'''$TEMPERATURE''', \\\"time\\\": \\\"'''$TIMESTAMP'''\\\"}' https://shield.upinatoms.com/temps 2>&1 | grep \\\"< HTTP/2\\\"\\n< HTTP/2 201\\n\\n\")), mdx(\"h3\", {\n    \"id\": \"get-sample-data-from-api\"\n  }, \"GET sample data from API\"), mdx(\"p\", null, \"A GET request to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"temps\"), \" endpoint returns the most recent readings, including the one submitted in the example above:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"$ curl -s https://shield.upinatoms.com/temps | jq .\\n[\\n  {\\n    \\\"temperature\\\": 36.3,\\n    \\\"time\\\": \\\"2020-09-28T02:57:49Z\\\"\\n  },\\n  {\\n    \\\"temperature\\\": 36.7,\\n    \\\"time\\\": \\\"2020-09-28T02:54:56Z\\\"\\n  },\\n  {\\n    \\\"temperature\\\": 36.2,\\n    \\\"time\\\": \\\"2020-09-28T02:33:08Z\\\"\\n  }\\n]\\n\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"create-cloudflare-issued-certificates\"\n  }, \"Create Cloudflare-issued certificates\"), mdx(\"p\", null, \"Before you can use API Shield to protect your API or web application, you must create Cloudflare-issued client certificates.\"), mdx(\"p\", null, \"You can \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/ssl/client-certificates/create-a-client-certificate\"\n  }, \"create a client certificate in the Cloudflare dashboard\"), \".\"), mdx(\"p\", null, \"However, since most developers working at scale generate their own private keys and certificate signing requests via API, this example uses the Cloudflare API to create client certificates.\"), mdx(Aside, {\n    type: \"warning\",\n    header: \"Important\",\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, \"You can only use API Shield with a certificate authority (CA) that is fully managed by Cloudflare. Cloudflare generates a unique CA for each zone.\"), mdx(\"p\", null, \"If you need to use a different CA, contact a Cloudflare customer success manager.\")), mdx(\"p\", null, \"To create a bootstrap certificate for the iOS application and the IoT device, this example uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/cloudflare/cfssl\"\n  }, \"Cloudflare\\u2019s public key infrastructure toolkit, CFSSL\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Generate a private key and CSR for the iOS device.\\n\\n$ cat <<'EOF' | tee -a csr.json\\n{\\n    \\\"hosts\\\": [\\n        \\\"ios-bootstrap.devices.upinatoms.com\\\"\\n    ],\\n    \\\"CN\\\": \\\"ios-bootstrap.devices.upinatoms.com\\\",\\n    \\\"key\\\": {\\n        \\\"algo\\\": \\\"rsa\\\",\\n        \\\"size\\\": 2048\\n    },\\n    \\\"names\\\": [{\\n        \\\"C\\\": \\\"US\\\",\\n        \\\"L\\\": \\\"Austin\\\",\\n        \\\"O\\\": \\\"Temperature Testers, Inc.\\\",\\n        \\\"OU\\\": \\\"Tech Operations\\\",\\n        \\\"ST\\\": \\\"Texas\\\"\\n    }]\\n}\\nEOF\\n\\n$ cfssl genkey csr.json | cfssljson -bare certificate\\n2020/09/27 21:28:46 [INFO] generate received request\\n2020/09/27 21:28:46 [INFO] received CSR\\n2020/09/27 21:28:46 [INFO] generating key: rsa-2048\\n2020/09/27 21:28:47 [INFO] encoded CSR\\n\\n$ mv certificate-key.pem ios-key.pem\\n$ mv certificate.csr ios.csr\\n\\n# Do the same for the IoT sensor.\\n\\n$ sed -i.bak 's/ios-bootstrap/sensor-001/g' csr.json\\n$ cfssl genkey csr.json | cfssljson -bare certificate\\n...\\n$ mv certificate-key.pem sensor-key.pem\\n$ mv certificate.csr sensor.csr\\n\\n// now ask that these CSRs be signed by the private CA issued for your zone\\n// we need to replace actual newlines in the CSR with \\u2018\\\\n\\u2019 before POST\\u2019ing\\n$ CSR=$(cat ios.csr | perl -pe 's/\\\\n/\\\\\\\\n/g')\\n$ request_body=$(< <(cat <<EOF\\n{\\n  \\\"validity_days\\\": 3650,\\n  \\\"csr\\\":\\\"$CSR\\\"\\n}\\nEOF\\n))\\n\\n// save the response so we can view it and then extra the certificate\\n$ curl -H 'X-Auth-Email: YOUR_EMAIL' -H 'X-Auth-Key: YOUR_API_KEY' -H 'Content-Type: application/json' -d \\u201C$request_body\\u201D https://api.cloudflare.com/client/v4/zones/YOUR_ZONE_ID/client_certificates > response.json\\n\\n$ cat response.json | jq .\\n{\\n  \\\"success\\\": true,\\n  \\\"errors\\\": [],\\n  \\\"messages\\\": [],\\n  \\\"result\\\": {\\n    \\\"id\\\": \\\"7bf7f70c-7600-42e1-81c4-e4c0da9aa515\\\",\\n    \\\"certificate_authority\\\": {\\n      \\\"id\\\": \\\"8f5606d9-5133-4e53-b062-a2e5da51be5e\\\",\\n      \\\"name\\\": \\\"Cloudflare Managed CA for account 11cbe197c050c9e422aaa103cfe30ed8\\\"\\n    },\\n    \\\"certificate\\\": \\\"-----BEGIN CERTIFICATE-----\\\\nMIIEkzCCA...\\\\n-----END CERTIFICATE-----\\\\n\\\",\\n    \\\"csr\\\": \\\"-----BEGIN CERTIFICATE REQUEST-----\\\\nMIIDITCCA...\\\\n-----END CERTIFICATE REQUEST-----\\\\n\\\",\\n    \\\"ski\\\": \\\"eb2a48a19802a705c0e8a39489a71bd586638fdf\\\",\\n    \\\"serial_number\\\": \\\"133270673305904147240315902291726509220894288063\\\",\\n    \\\"signature\\\": \\\"SHA256WithRSA\\\",\\n    \\\"common_name\\\": \\\"ios-bootstrap.devices.upinatoms.com\\\",\\n    \\\"organization\\\": \\\"Temperature Testers, Inc.\\\",\\n    \\\"organizational_unit\\\": \\\"Tech Operations\\\",\\n    \\\"country\\\": \\\"US\\\",\\n    \\\"state\\\": \\\"Texas\\\",\\n    \\\"location\\\": \\\"Austin\\\",\\n    \\\"expires_on\\\": \\\"2030-09-26T02:41:00Z\\\",\\n    \\\"issued_on\\\": \\\"2020-09-28T02:41:00Z\\\",\\n    \\\"fingerprint_sha256\\\": \\\"84b045d498f53a59bef53358441a3957de81261211fc9b6d46b0bf5880bdaf25\\\",\\n    \\\"validity_days\\\": 3650\\n  }\\n}\\n\\n$ cat response.json | jq .result.certificate | perl -npe 's/\\\\\\\\n/\\\\n/g; s/\\\"//g' > ios.pem\\n\\n# Now ask that the second client certificate signing request be signed.\\n\\n$ CSR=$(cat sensor.csr | perl -pe 's/\\\\n/\\\\\\\\n/g')\\n$ request_body=$(< <(cat <<EOF\\n{\\n  \\\"validity_days\\\": 3650,\\n  \\\"csr\\\":\\\"$CSR\\\"\\n}\\nEOF\\n))\\n\\n$ curl -H 'X-Auth-Email: YOUR_EMAIL' -H 'X-Auth-Key: YOUR_API_KEY' -H 'Content-Type: application/json' -d \\\"$request_body\\\" https://api.cloudflare.com/client/v4/zones/YOUR_ZONE_ID/client_certificates | perl -npe 's/\\\\\\\\n/\\\\n/g; s/\\\"//g' > sensor.pem\\n\\n\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"embed-the-client-certificate-in-your-mobile-app\"\n  }, \"Embed the client certificate in your mobile app\"), mdx(\"p\", null, \"To configure the mobile app to securely request temperature data submitted by the IoT device, embed the client certificate in the mobile app.\"), mdx(\"p\", null, \"For simplicity, this example embeds a \\u201Cbootstrap\\u201D certificate and key in the application bundle as a PKCS#12-formatted file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ openssl pkcs12 -export -out bootstrap-cert.pfx -inkey ios-key.pem -in ios.pem\\nEnter Export Password:\\nVerifying - Enter Export Password:\\n\")), mdx(\"p\", null, \"In a real-world deployment, a bootstrap certificate should only be used in conjunction with users\\u2019 credentials to authenticate with an API endpoint that can return a unique user certificate. Corporate users will want to use mobile device management (MDM) to distribute certificates.\"), mdx(\"h3\", {\n    \"id\": \"embed-the-client-certificate-in-an-android-app\"\n  }, \"Embed the client certificate in an Android app\"), mdx(\"p\", null, \"The following is an example of how you may use a client certificate in an Android app to make HTTP calls. You need to add the following permission in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AndroidManifest.xml\"), \" to allow an Internet connection.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<uses-permission android:name=\\\"android.permission.INTERNET\\\" />\\n\")), mdx(\"p\", null, \"For demonstration purposes, the certificate in this example is stored in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app/src/main/res/raw/cert.pem\"), \" and the private key is stored in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app/src/main/res/raw/key.pem\"), \". You may also store these files in other secure manners. \"), mdx(\"p\", null, \"The following example uses an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OkHttpClient\"), \", but you may also use other clients such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpURLConnection\"), \" in similar ways. The key is to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SSLSocketFactory\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"private OkHttpClient setUpClient() {\\n    try {\\n        final String SECRET = \\\"secret\\\"; // You may also store this String somewhere more secure.\\n        CertificateFactory certificateFactory = CertificateFactory.getInstance(\\\"X.509\\\");\\n\\n        // Get private key\\n        InputStream privateKeyInputStream = getResources().openRawResource(R.raw.key);\\n        byte[] privateKeyByteArray = new byte[privateKeyInputStream.available()];\\n        privateKeyInputStream.read(privateKeyByteArray);\\n\\n        String privateKeyContent = new String(privateKeyByteArray, Charset.defaultCharset())\\n                .replace(\\\"-----BEGIN PRIVATE KEY-----\\\", \\\"\\\")\\n                .replaceAll(System.lineSeparator(), \\\"\\\")\\n                .replace(\\\"-----END PRIVATE KEY-----\\\", \\\"\\\");\\n\\n        byte[] rawPrivateKeyByteArray = Base64.getDecoder().decode(privateKeyContent);\\n        KeyFactory keyFactory = KeyFactory.getInstance(\\\"RSA\\\");\\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(rawPrivateKeyByteArray);\\n\\n        // Get certificate\\n        InputStream certificateInputStream = getResources().openRawResource(R.raw.cert);\\n        Certificate certificate = certificateFactory.generateCertificate(certificateInputStream);\\n\\n        // Set up KeyStore\\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\\n        keyStore.load(null, SECRET.toCharArray());\\n        keyStore.setKeyEntry(\\\"client\\\", keyFactory.generatePrivate(keySpec), SECRET.toCharArray(), new Certificate[]{certificate});\\n        certificateInputStream.close();\\n\\n        // Set up Trust Managers\\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\\n        trustManagerFactory.init((KeyStore) null);\\n        TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\\n\\n        // Set up Key Managers\\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\\n        keyManagerFactory.init(keyStore, SECRET.toCharArray());\\n        KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\\n\\n        // Obtain SSL Socket Factory\\n        SSLContext sslContext = SSLContext.getInstance(\\\"TLS\\\");\\n        sslContext.init(keyManagers, trustManagers, new SecureRandom());\\n        SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();\\n\\n        // Finally, return the client, which will then be used to make HTTP calls.\\n        OkHttpClient client = new OkHttpClient.Builder()\\n                .sslSocketFactory(sslSocketFactory)\\n                .build();\\n\\n        return client;\\n\\n    } catch (CertificateException | IOException | NoSuchAlgorithmException | KeyStoreException | UnrecoverableKeyException | KeyManagementException | InvalidKeySpecException e) {\\n        e.printStackTrace();\\n        return null;\\n    }\\n}\\n\")), mdx(\"p\", null, \"The above function returns an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OkHttpClient\"), \" embedded with the client certificate. You can now use this client to make HTTP requests to your API endpoint protected with mTLS.\"), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"embed-the-client-certificate-on-your-iot-device\"\n  }, \"Embed the client certificate on your IoT device\"), mdx(\"p\", null, \"To prepare the IoT device for secure communication with the API endpoint, embed the certificate on the device and configure the device to use the certificate when making POST requests.\"), mdx(\"p\", null, \"This example assumes the certificate and the private key are securely copied to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/ssl/private/sensor-key.pem\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/ssl/certs/sensor.pem\"), \".\"), mdx(\"p\", null, \"The sample script is modified to point to these files:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"import requests\\nimport json\\nfrom datetime import datetime\\n\\ndef readSensor():\\n\\n    # Takes a reading from a temperature sensor and store it to temp_measurement\\n\\n    dateTimeObj = datetime.now()\\n    timestampStr = dateTimeObj.strftime(\\u2018%Y-%m-%dT%H:%M:%SZ\\u2019)\\n\\n    measurement = {'temperature':str(temp_measurement),'time':timestampStr}\\n    return measurement\\n\\ndef main():\\n\\n    print(\\\"Cloudflare API Shield [IoT device demonstration]\\\")\\n\\n    temperature = readSensor()\\n    payload = json.dumps(temperature)\\n\\n    url = 'https://shield.upinatoms.com/temps'\\n    json_headers = {'Content-Type': 'application/json'}\\n    cert_file = ('/etc/ssl/certs/sensor.pem', '/etc/ssl/private/sensor-key.pem')\\n\\n    r = requests.post(url, headers = json_headers, data = payload, cert = cert_file)\\n\\n    print(\\\"Request body: \\\", r.request.body)\\n    print(\\\"Response status code: %d\\\" % r.status_code)\\n\")), mdx(\"p\", null, \"When the script attempts to connect to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://shield.upinatoms.com/temps\"), \", Cloudflare requests that a client certificate is sent, and the script sends the contents of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/ssl/certs/sensor.pem\"), \" and then, as required to complete the SSL/TLS handshake, demonstrates it has possession of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/ssl/private/sensor-key.pem\"), \".\"), mdx(\"p\", null, \"Without the client certificate, the Cloudflare rejects the request:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"Cloudflare API Shield [IoT device demonstration]\\nRequest body:  {\\\"temperature\\\": \\\"36.5\\\", \\\"time\\\": \\\"2020-09-28T15:52:19Z\\\"}\\nResponse status code: 403\\n\")), mdx(\"p\", null, \"When the IoT device presents a valid client certificate, the POST request succeeds and the temperature reading is recorded:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"Cloudflare API Shield [IoT device demonstration]\\nRequest body:  {\\\"temperature\\\": \\\"36.5\\\", \\\"time\\\": \\\"2020-09-28T15:56:45Z\\\"}\\nResponse status code: 201\\n\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"enable-mtls\"\n  }, \"Enable mTLS\"), mdx(\"p\", null, \"After creating Cloudflare-issued certificates, the next step is to enable mTLS for the hosts you want to protect with API Shield.\"), mdx(\"p\", null, \"For instructions, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/ssl/client-certificates/enable-mtls\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Enable mutual Transport Layer Security\")), \".\"), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"configure-api-shield-to-require-client-certificates\"\n  }, \"Configure API Shield to require client certificates\"), mdx(\"p\", null, \"To configure API Shield to require client certificates, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-dashboard/create-mtls-rule\"\n  }, \"create a mTLS rule\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"demo":null,"difficulty":null,"summary":null,"tags":null,"title":"","type":null,"updated":null}}},"pageContext":{"id":"5723ab69-1dc0-50b8-b36d-ada4a59cc8da","fields":{"slug":"/client-certificates/configure-your-mobile-app-or-iot-device"},"frontmatter":{"title":"","type":null,"order":3,"hidden":null,"hideChildren":null,"breadcrumbs":null},"headings":[{"value":"Configure your mobile app or IoT device","depth":1}],"tableOfContents":{"items":[{"url":"#configure-your-mobile-app-or-iot-device","title":"Configure your mobile app or IoT device","items":[{"url":"#validate-api","title":"Validate API","items":[{"url":"#post-sample-data-to-api","title":"POST sample data to API"},{"url":"#get-sample-data-from-api","title":"GET sample data from API"}]},{"url":"#create-cloudflare-issued-certificates","title":"Create Cloudflare-issued certificates"},{"url":"#embed-the-client-certificate-in-your-mobile-app","title":"Embed the client certificate in your mobile app","items":[{"url":"#embed-the-client-certificate-in-an-android-app","title":"Embed the client certificate in an Android app"}]},{"url":"#embed-the-client-certificate-on-your-iot-device","title":"Embed the client certificate on your IoT device"},{"url":"#enable-mtls","title":"Enable mTLS"},{"url":"#configure-api-shield-to-require-client-certificates","title":"Configure API Shield to require client certificates"}]}]},"parent":{"modifiedTime":"2021-07-26","relativePath":"client-certificates/configure-your-mobile-app-or-iot-device.md"}}},"staticQueryHashes":["000000003","000000001","000000002","123456789","113355779"]}