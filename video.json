{
  "componentChunkName": "component---src-components-mdx-custom-renderer-js",
  "path": "/uploading-videos/upload-via-link",
  "result": {
    "data": {
      "mdx": {
        "id": "6c245d81-654a-5531-a9b6-539713c6e09d",
        "body": "",
        "frontmatter": {
          "demo": null,
          "difficulty": null,
          "summary": null,
          "tags": null,
          "title": "",
          "type": null,
          "updated": null
        }
      }
    },
    "pageContext": {
      "id": "6c245d81-654a-5531-a9b6-539713c6e09d",
      "fields": {
        "slug": "/uploading-videos/upload-via-link"
      },
      "frontmatter": {
        "title": "",
        "type": null,
        "order": 1,
        "hidden": null,
        "hideChildren": null,
        "breadcrumbs": null
      },
      "headings": [
        {
          "value": "Upload via link",
          "depth": 1
        }
      ],
      "tableOfContents": {
        "items": [
          {
            "url": "#upload-via-link",
            "title": "Upload via link",
            "items": [
              {
                "url": "#step-1-make-an-api-call-with-the-link",
                "title": "Step 1: Make an API call with the link"
              },
              {
                "url": "#step-2-poll-the-api-or-wait-for-a-webhook",
                "title": "Step 2: Poll the API or wait for a webhook"
              },
              {
                "url": "#step-3-view-the-video",
                "title": "Step 3: View the video"
              }
            ]
          }
        ]
      },
      "parent": {
        "modifiedTime": "2021-07-29",
        "relativePath": "uploading-videos/upload-via-link.md"
      }
    }
  },
  "staticQueryHashes": [
    "1052658729",
    "2814688963",
    "32046230",
    "338033027",
    "811020565"
  ]
}







var _excluded = ["components"];

function _extends() {
	_extends = Object.assign || function(target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];
			for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}
		return target;
	};
	return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
	if (source == null) return {};
	var target = _objectWithoutPropertiesLoose(source, excluded);
	var key, i;
	if (Object.getOwnPropertySymbols) {
		var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
		for (i = 0; i < sourceSymbolKeys.length; i++) {
			key = sourceSymbolKeys[i];
			if (excluded.indexOf(key) >= 0) continue;
			if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
			target[key] = source[key];
		}
	}
	return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
	if (source == null) return {};
	var target = {};
	var sourceKeys = Object.keys(source);
	var key, i;
	for (i = 0; i < sourceKeys.length; i++) {
		key = sourceKeys[i];
		if (excluded.indexOf(key) >= 0) continue;
		target[key] = source[key];
	}
	return target;
} /* @jsx mdx */
var _frontmatter = {
	"order": 1,
	"pcx-content-type": "how-to"
};
var makeShortcode = function makeShortcode(name) {
	return function MDXDefaultShortcode(props) {
		console.warn("Component " + name + " was not imported, exported, or provided by MDXProvider as global scope");
		return mdx("div", props);
	};
};
var Button = makeShortcode("Button");
var layoutProps = {
	_frontmatter: _frontmatter
};
var MDXLayout = "wrapper";
return function MDXContent(_ref) {
		var components = _ref.components,
			props = _objectWithoutProperties(_ref, _excluded);
		return mdx(MDXLayout, _extends({}, layoutProps, props, {
					components: components,
					mdxType: "MDXLayout"
				}), mdx("h1", {
					"id": "upload-via-link"
				}, "Upload via link"), mdx("p", null, "If you have videos stored in a cloud storage bucket, you can simply pass a HTTP link for the file. Stream will fetch the file and make it available for streaming."), mdx("p", null, "By using ", mdx("a", {
					parentName: "p",
					"href": "/stream/uploading-videos/using-webhooks"
				}, "webhooks"), " you can receive a notification when the video is ready to be played or if it errors."), mdx("h2", {
					"id": "step-1-make-an-api-call-with-the-link"
				}, "Step 1: Make an API call with the link"), mdx("p", null, "Make a HTTP request to the Stream API with the URL of the video."), mdx("pre", null, mdx("code", {
							parentName: "pre",
							"className": "language-bash"
						}, "curl \\\\\ -X POST \\\\\ -d '{\\"
						url\\ ":\\"
						https: //storage.googleapis.com/zaid-test/Watermarks%20Demo/cf-ad-original.mp4\\",\\"meta\\":{\\"name\\":\\"My First Stream Video\\"}}' \\\\\ -H \\"Authorization: Bearer $TOKEN\\" \\\\\ https://api.cloudflare.com/client/v4/accounts/$ACCOUND_ID/stream/copy\ ")), mdx("pre", null, mdx("code", {     parentName: "pre",     "className": "language-json"   }, "{\   \\"result\\": {\     \\"uid\\": \\"4544715edbe00808d89aec0a3a765c40\\",\     \\"thumbnail\\": \\"https://videodelivery.net/4544715edbe00808d89aec0a3a765c40/thumbnails/thumbnail.jpg\\",\     \\"thumbnailTimestampPct\\": 0,\     \\"readyToStream\\": false,\     \\"status\\": {\       \\"state\\": \\"downloading\\"\     },\     \\"meta\\": {\       \\"downloaded-from\\": \\"https://storage.googleapis.com/zaid-test/Watermarks%20Demo/cf-ad-original.mp4\\",\       \\"name\\": \\"My First Stream Video\\"\     },\     \\"created\\": \\"2020-10-16T20:20:17.872170843Z\\",\     \\"modified\\": \\"2020-10-16T20:20:17.872170843Z\\",\     \\"size\\": 9032701,\     \\"preview\\": \\"https://watch.cloudflarestream.com/4544715edbe00808d89aec0a3a765c40\\",\     \\"allowedOrigins\\": [],\     \\"requireSignedURLs\\": false,\     \\"uploaded\\": \\"2020-10-16T20:20:17.872170843Z\\",\     \\"uploadExpiry\\": null,\     \\"maxSizeBytes\\": 0,\     \\"maxDurationSeconds\\": 0,\     \\"duration\\": -1,\     \\"input\\": {\       \\"width\\": -1,\       \\"height\\": -1\     },\     \\"playback\\": {\       \\"hls\\": \\"https://videodelivery.net/4544715edbe00808d89aec0a3a765c40/manifest/video.m3u8\\",\       \\"dash\\": \\"https://videodelivery.net/4544715edbe00808d89aec0a3a765c40/manifest/video.mpd\\"\     },\     \\"watermark\\": null\   },\   \\"success\\": true,\   \\"errors\\": [],\   \\"messages\\": []\ }\ ")), mdx("h2", {     "id": "step-2-poll-the-api-or-wait-for-a-webhook"   }, "Step 2: Poll the API or wait for a ", mdx("a", {     parentName: "h2",     "href": "/stream/uploading-videos/using-webhooks"   }, "webhook")), mdx("p", null, "Because Stream must download and encode the video, the video might not be available for a few seconds to a few minutes depending on the length of your video. You should poll the Stream API until ", mdx("inlineCode", {     parentName: "p"   }, "readyToStream"), " is ", mdx("inlineCode", {     parentName: "p"   }, "true"), ", or use ", mdx("a", {     parentName: "p",     "href": "/stream/uploading-videos/using-webhooks"   }, "webhooks"), " to be notified when a video is ready for streaming."), mdx("h2", {     "id": "step-3-view-the-video"   }, "Step 3: View the video"), mdx("p", null, "The ", mdx("inlineCode", {     parentName: "p"   }, "uid"), " of the video can be used refer to the video after uploading and can be used to play it using the ", mdx("a", {     parentName: "p",     "href": "/stream/viewing-videos/using-the-stream-player"   }, "Stream video player"), "."), mdx("p", null, "If you're using your own player or rendering the video in a mobile app, view information on ", mdx("a", {     parentName: "p",     "href": "/stream/viewing-videos/using-the-player-api"   }, "using your own player"), "."), mdx("figure", {     "data-type": "stream"   }, mdx("div", {     className: "AspectRatio",     style: {       "--aspect-ratio": "calc(16 / 9)"     }   }, mdx("iframe", {     className: "AspectRatio--content",     src: "https://iframe.videodelivery.net/5d5bc37ffcf54c9b82e996823bffbb81?mute=true",     title: "Example Stream video",     frameBorder: "0",     allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",     allowFullScreen: true   }))), mdx("p", null, mdx(Button, {     type: "primary",     href: "https://api.cloudflare.com/#stream-videos-upload-a-video-from-a-url",     mdxType: "Button"   }, "View detailed API reference"))); } ; MDXContent.isMDXComponent = true;