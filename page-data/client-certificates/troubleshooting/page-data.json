{
  "componentChunkName": "component-mdx.js",
  "path": "/client-certificates/troubleshooting",
  "result": {
    "data": {
      "mdx": {
        "id": "1c83ce02-1a47-50eb-a966-bfc497f63803",
        "body": "var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\n\nMDXContent.isMDXComponent = true;"
       
      }
    },
    "pageContext": {
      "id": "1c83ce02-1a47-50eb-a966-bfc497f63803",
      "fields": {
        "slug": "/client-certificates/troubleshooting"
      },
      "frontmatter": {
        "title": "",
        "type": null,
        "order": 6
      },
      "headings": [
        {
          "value": "Troubleshooting - headings 3",
          "depth": 1
        }
      ],
      "tableOfContents": {
        "items": [
          {
            "url": "#troubleshooting",
            "title": "Troubleshooting - tableOfContents",
            "items": [
              {
                "url": "#ssltls-handshake",
                "title": "SSL/TLS handshake"
              },
              {
                "url": "#mtls-host-enablement",
                "title": "mTLS host enablement"
              },
              {
                "url": "#mtls-rules",
                "title": "mTLS rules"
              }
            ]
          }
        ]
      },
      "parent": {
        "modifiedTime": "2021-07-26",
        "relativePath": "client-certificates/troubleshooting.md"
      }
    }
  },
  "staticQueryHashes": [
    "000000003",
    "000000001",
    "000000002",
    "123456789",
    "113355779"
  ]
}